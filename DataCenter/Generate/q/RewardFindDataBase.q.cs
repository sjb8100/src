//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;

namespace table
{
	public static partial class RewardFindDataBaseExtensions
	{
		/// <summary>
		/// 通过[玩家等级]二分快速查表
		/// </summary>
		/// <param name="dwLv">玩家等级</param>
		/// <returns></returns>
		public static IEnumerable<RewardFindDataBase> Query(this List<RewardFindDataBase> sorted, uint dwLv)
		{
			var key = new RewardFindDataBase() { dwLv = dwLv };
			var comparer = new Comparer1();
			var from = sorted.BinarySearch(key, comparer);
			if (from < 0) yield break;
			var to = from + 1;
			while (from > 0 && comparer.Compare(key, sorted[from - 1]) == 0) from--;
			while (to < sorted.Count && comparer.Compare(key, sorted[to]) == 0) to++;
			for (var i = from; i < to; i++) yield return sorted[i];
		}
		/// <summary>
		/// 通过[玩家等级 + 日常ID]二分快速查表
		/// </summary>
		/// <param name="dwLv">玩家等级</param>
		/// <param name="dwID">日常ID</param>
		/// <returns></returns>
		public static RewardFindDataBase Query(this List<RewardFindDataBase> sorted, uint dwLv, uint dwID)
		{
			var key = new RewardFindDataBase() { dwLv = dwLv, dwID = dwID };
			var comparer = new Comparer2();
			var index = sorted.BinarySearch(key, comparer);
			return index >= 0 ? sorted[index] : default(RewardFindDataBase);
		}

		#region Comparer
		class Comparer1 : Comparer<RewardFindDataBase>
		{
			public override int Compare(RewardFindDataBase a, RewardFindDataBase b)
			{
				{ var n = a.dwLv.CompareTo(b.dwLv); if (n != 0) return n; }
				return 0;
			}
		}
		class Comparer2 : Comparer<RewardFindDataBase>
		{
			public override int Compare(RewardFindDataBase a, RewardFindDataBase b)
			{
				{ var n = a.dwLv.CompareTo(b.dwLv); if (n != 0) return n; }
				{ var n = a.dwID.CompareTo(b.dwID); if (n != 0) return n; }
				return 0;
			}
		}
		#endregion
	}
}
